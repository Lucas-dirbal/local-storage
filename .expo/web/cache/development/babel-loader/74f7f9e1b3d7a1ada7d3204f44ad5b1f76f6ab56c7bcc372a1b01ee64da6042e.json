{"ast":null,"code":"'use strict';\n\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _createForOfIteratorHelperLoose(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (t) return (t = t.call(r)).next.bind(t); if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) { t && (r = t); var o = 0; return function () { return o >= r.length ? { done: !0 } : { done: !1, value: r[o++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) { n[e] = r[e]; } return n; }\nimport UTFSequence from \"../../UTFSequence\";\nimport stringifySafe from \"../../Utilities/stringifySafe\";\nimport parseErrorStack from \"../../Core/Devtools/parseErrorStack\";\nvar BABEL_TRANSFORM_ERROR_FORMAT = /^(?:TransformError )?(?:SyntaxError: |ReferenceError: )(.*): (.*) \\((\\d+):(\\d+)\\)\\n\\n([\\s\\S]+)/;\nvar BABEL_CODE_FRAME_ERROR_FORMAT = /^(?:TransformError )?(?:(?:[\\0-\\t\\x0B\\f\\x0E-\\u2027\\u202A-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])*):? (?:(?:[\\0-\\t\\x0B\\f\\x0E-\\u2027\\u202A-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])*?)(\\/(?:[\\0-\\t\\x0B\\f\\x0E-\\u2027\\u202A-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])*): ((?:[\\0-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])+?)\\n([ >]{2}[\\t-\\r 0-9\\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]+ \\|(?:[\\0-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])+|\\x1B(?:[\\0-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])+)/;\nvar METRO_ERROR_FORMAT = /^(?:InternalError Metro has encountered an error:) ((?:[\\0-\\t\\x0B\\f\\x0E-\\u2027\\u202A-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])*): ((?:[\\0-\\t\\x0B\\f\\x0E-\\u2027\\u202A-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])*) \\(([0-9]+):([0-9]+)\\)\\n\\n((?:[\\0-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])+)/;\nvar SUBSTITUTION = UTFSequence.BOM + '%s';\nexport function parseInterpolation(args) {\n  var categoryParts = [];\n  var contentParts = [];\n  var substitutionOffsets = [];\n  var remaining = _toConsumableArray(args);\n  if (typeof remaining[0] === 'string') {\n    var formatString = String(remaining.shift());\n    var formatStringParts = formatString.split('%s');\n    var substitutionCount = formatStringParts.length - 1;\n    var substitutions = remaining.splice(0, substitutionCount);\n    var categoryString = '';\n    var contentString = '';\n    var substitutionIndex = 0;\n    for (var _iterator = _createForOfIteratorHelperLoose(formatStringParts), _step; !(_step = _iterator()).done;) {\n      var formatStringPart = _step.value;\n      categoryString += formatStringPart;\n      contentString += formatStringPart;\n      if (substitutionIndex < substitutionCount) {\n        if (substitutionIndex < substitutions.length) {\n          var substitution = typeof substitutions[substitutionIndex] === 'string' ? substitutions[substitutionIndex] : stringifySafe(substitutions[substitutionIndex]);\n          substitutionOffsets.push({\n            length: substitution.length,\n            offset: contentString.length\n          });\n          categoryString += SUBSTITUTION;\n          contentString += substitution;\n        } else {\n          substitutionOffsets.push({\n            length: 2,\n            offset: contentString.length\n          });\n          categoryString += '%s';\n          contentString += '%s';\n        }\n        substitutionIndex++;\n      }\n    }\n    categoryParts.push(categoryString);\n    contentParts.push(contentString);\n  }\n  var remainingArgs = remaining.map(function (arg) {\n    return typeof arg === 'string' ? arg : stringifySafe(arg);\n  });\n  categoryParts.push.apply(categoryParts, _toConsumableArray(remainingArgs));\n  contentParts.push.apply(contentParts, _toConsumableArray(remainingArgs));\n  return {\n    category: categoryParts.join(' '),\n    message: {\n      content: contentParts.join(' '),\n      substitutions: substitutionOffsets\n    }\n  };\n}\nfunction isComponentStack(consoleArgument) {\n  var isOldComponentStackFormat = / {4}in/.test(consoleArgument);\n  var isNewComponentStackFormat = / {4}at/.test(consoleArgument);\n  var isNewJSCComponentStackFormat = /@.*\\n/.test(consoleArgument);\n  return isOldComponentStackFormat || isNewComponentStackFormat || isNewJSCComponentStackFormat;\n}\nexport function parseComponentStack(message) {\n  var stack = parseErrorStack(message);\n  if (stack && stack.length > 0) {\n    return stack.map(function (frame) {\n      return {\n        content: frame.methodName,\n        collapse: frame.collapse || false,\n        fileName: frame.file == null ? 'unknown' : frame.file,\n        location: {\n          column: frame.column == null ? -1 : frame.column,\n          row: frame.lineNumber == null ? -1 : frame.lineNumber\n        }\n      };\n    });\n  }\n  return message.split(/\\n {4}in /g).map(function (s) {\n    if (!s) {\n      return null;\n    }\n    var match = s.match(/(.*) \\(at (.*\\.js):([\\d]+)\\)/);\n    if (!match) {\n      return null;\n    }\n    var _match$slice = match.slice(1),\n      _match$slice2 = _slicedToArray(_match$slice, 3),\n      content = _match$slice2[0],\n      fileName = _match$slice2[1],\n      row = _match$slice2[2];\n    return {\n      content: content,\n      fileName: fileName,\n      location: {\n        column: -1,\n        row: parseInt(row, 10)\n      }\n    };\n  }).filter(Boolean);\n}\nexport function parseLogBoxException(error) {\n  var message = error.originalMessage != null ? error.originalMessage : 'Unknown';\n  var metroInternalError = message.match(METRO_ERROR_FORMAT);\n  if (metroInternalError) {\n    var _metroInternalError$s = metroInternalError.slice(1),\n      _metroInternalError$s2 = _slicedToArray(_metroInternalError$s, 5),\n      content = _metroInternalError$s2[0],\n      fileName = _metroInternalError$s2[1],\n      row = _metroInternalError$s2[2],\n      column = _metroInternalError$s2[3],\n      codeFrame = _metroInternalError$s2[4];\n    return {\n      level: 'fatal',\n      type: 'Metro Error',\n      stack: [],\n      isComponentError: false,\n      componentStack: [],\n      codeFrame: {\n        fileName: fileName,\n        location: {\n          row: parseInt(row, 10),\n          column: parseInt(column, 10)\n        },\n        content: codeFrame\n      },\n      message: {\n        content: content,\n        substitutions: []\n      },\n      category: fileName + \"-\" + row + \"-\" + column\n    };\n  }\n  var babelTransformError = message.match(BABEL_TRANSFORM_ERROR_FORMAT);\n  if (babelTransformError) {\n    var _babelTransformError$ = babelTransformError.slice(1),\n      _babelTransformError$2 = _slicedToArray(_babelTransformError$, 5),\n      _fileName = _babelTransformError$2[0],\n      _content = _babelTransformError$2[1],\n      _row = _babelTransformError$2[2],\n      _column = _babelTransformError$2[3],\n      _codeFrame = _babelTransformError$2[4];\n    return {\n      level: 'syntax',\n      stack: [],\n      isComponentError: false,\n      componentStack: [],\n      codeFrame: {\n        fileName: _fileName,\n        location: {\n          row: parseInt(_row, 10),\n          column: parseInt(_column, 10)\n        },\n        content: _codeFrame\n      },\n      message: {\n        content: _content,\n        substitutions: []\n      },\n      category: _fileName + \"-\" + _row + \"-\" + _column\n    };\n  }\n  var babelCodeFrameError = message.match(BABEL_CODE_FRAME_ERROR_FORMAT);\n  if (babelCodeFrameError) {\n    var _babelCodeFrameError$ = babelCodeFrameError.slice(1),\n      _babelCodeFrameError$2 = _slicedToArray(_babelCodeFrameError$, 3),\n      _fileName2 = _babelCodeFrameError$2[0],\n      _content2 = _babelCodeFrameError$2[1],\n      _codeFrame2 = _babelCodeFrameError$2[2];\n    return {\n      level: 'syntax',\n      stack: [],\n      isComponentError: false,\n      componentStack: [],\n      codeFrame: {\n        fileName: _fileName2,\n        location: null,\n        content: _codeFrame2\n      },\n      message: {\n        content: _content2,\n        substitutions: []\n      },\n      category: _fileName2 + \"-\" + 1 + \"-\" + 1\n    };\n  }\n  if (message.match(/^TransformError /)) {\n    return {\n      level: 'syntax',\n      stack: error.stack,\n      isComponentError: error.isComponentError,\n      componentStack: [],\n      message: {\n        content: message,\n        substitutions: []\n      },\n      category: message\n    };\n  }\n  var componentStack = error.componentStack;\n  if (error.isFatal || error.isComponentError) {\n    return _objectSpread({\n      level: 'fatal',\n      stack: error.stack,\n      isComponentError: error.isComponentError,\n      componentStack: componentStack != null ? parseComponentStack(componentStack) : []\n    }, parseInterpolation([message]));\n  }\n  if (componentStack != null) {\n    return _objectSpread({\n      level: 'error',\n      stack: error.stack,\n      isComponentError: error.isComponentError,\n      componentStack: parseComponentStack(componentStack)\n    }, parseInterpolation([message]));\n  }\n  return _objectSpread({\n    level: 'error',\n    stack: error.stack,\n    isComponentError: error.isComponentError\n  }, parseLogBoxLog([message]));\n}\nexport function parseLogBoxLog(args) {\n  var message = args[0];\n  var argsWithoutComponentStack = [];\n  var componentStack = [];\n  if (typeof message === 'string' && message.slice(-2) === '%s' && args.length > 0) {\n    var lastArg = args[args.length - 1];\n    if (typeof lastArg === 'string' && isComponentStack(lastArg)) {\n      argsWithoutComponentStack = args.slice(0, -1);\n      argsWithoutComponentStack[0] = message.slice(0, -2);\n      componentStack = parseComponentStack(lastArg);\n    }\n  }\n  if (componentStack.length === 0) {\n    for (var _iterator2 = _createForOfIteratorHelperLoose(args), _step2; !(_step2 = _iterator2()).done;) {\n      var arg = _step2.value;\n      if (typeof arg === 'string' && isComponentStack(arg)) {\n        var messageEndIndex = arg.search(/\\n {4}(in|at) /);\n        if (messageEndIndex < 0) {\n          messageEndIndex = arg.search(/\\n/);\n        }\n        if (messageEndIndex > 0) {\n          argsWithoutComponentStack.push(arg.slice(0, messageEndIndex));\n        }\n        componentStack = parseComponentStack(arg);\n      } else {\n        argsWithoutComponentStack.push(arg);\n      }\n    }\n  }\n  return _objectSpread(_objectSpread({}, parseInterpolation(argsWithoutComponentStack)), {}, {\n    componentStack: componentStack\n  });\n}","map":{"version":3,"names":["_defineProperty","_slicedToArray","_toConsumableArray","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","getOwnPropertyDescriptors","defineProperties","defineProperty","_createForOfIteratorHelperLoose","Symbol","iterator","call","next","bind","Array","isArray","_unsupportedIterableToArray","done","value","TypeError","a","_arrayLikeToArray","toString","slice","constructor","name","from","test","n","UTFSequence","stringifySafe","parseErrorStack","BABEL_TRANSFORM_ERROR_FORMAT","BABEL_CODE_FRAME_ERROR_FORMAT","METRO_ERROR_FORMAT","SUBSTITUTION","BOM","parseInterpolation","args","categoryParts","contentParts","substitutionOffsets","remaining","formatString","String","shift","formatStringParts","split","substitutionCount","substitutions","splice","categoryString","contentString","substitutionIndex","_iterator","_step","formatStringPart","substitution","offset","remainingArgs","map","arg","category","join","message","content","isComponentStack","consoleArgument","isOldComponentStackFormat","isNewComponentStackFormat","isNewJSCComponentStackFormat","parseComponentStack","stack","frame","methodName","collapse","fileName","file","location","column","row","lineNumber","s","match","_match$slice","_match$slice2","parseInt","Boolean","parseLogBoxException","error","originalMessage","metroInternalError","_metroInternalError$s","_metroInternalError$s2","codeFrame","level","type","isComponentError","componentStack","babelTransformError","_babelTransformError$","_babelTransformError$2","babelCodeFrameError","_babelCodeFrameError$","_babelCodeFrameError$2","isFatal","parseLogBoxLog","argsWithoutComponentStack","lastArg","_iterator2","_step2","messageEndIndex","search"],"sources":["/workspaces/local-storage/node_modules/react-native/Libraries/LogBox/Data/parseLogBoxLog.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nimport UTFSequence from '../../UTFSequence';\nimport stringifySafe from '../../Utilities/stringifySafe';\nimport type {ExceptionData} from '../../Core/NativeExceptionsManager';\nimport type {LogBoxLogData} from './LogBoxLog';\nimport parseErrorStack from '../../Core/Devtools/parseErrorStack';\n\nconst BABEL_TRANSFORM_ERROR_FORMAT = /^(?:TransformError )?(?:SyntaxError: |ReferenceError: )(.*): (.*) \\((\\d+):(\\d+)\\)\\n\\n([\\s\\S]+)/;\nconst BABEL_CODE_FRAME_ERROR_FORMAT = /^(?:TransformError )?(?:.*):? (?:.*?)(\\/.*): ([\\s\\S]+?)\\n([ >]{2}[\\d\\s]+ \\|[\\s\\S]+|\\u{001b}[\\s\\S]+)/u;\nconst METRO_ERROR_FORMAT = /^(?:InternalError Metro has encountered an error:) (.*): (.*) \\((\\d+):(\\d+)\\)\\n\\n([\\s\\S]+)/u;\n\nexport type ExtendedExceptionData = ExceptionData & {\n  isComponentError: boolean,\n  ...\n};\nexport type Category = string;\nexport type CodeFrame = $ReadOnly<{|\n  content: string,\n  location: ?{\n    row: number,\n    column: number,\n    ...\n  },\n  fileName: string,\n\n  // TODO: When React switched to using call stack frames,\n  // we gained the ability to use the collapse flag, but\n  // it is not integrated into the LogBox UI.\n  collapse?: boolean,\n|}>;\nexport type Message = $ReadOnly<{|\n  content: string,\n  substitutions: $ReadOnlyArray<\n    $ReadOnly<{|\n      length: number,\n      offset: number,\n    |}>,\n  >,\n|}>;\n\nexport type ComponentStack = $ReadOnlyArray<CodeFrame>;\n\nconst SUBSTITUTION = UTFSequence.BOM + '%s';\n\nexport function parseInterpolation(\n  args: $ReadOnlyArray<mixed>,\n): $ReadOnly<{|\n  category: Category,\n  message: Message,\n|}> {\n  const categoryParts = [];\n  const contentParts = [];\n  const substitutionOffsets = [];\n\n  const remaining = [...args];\n  if (typeof remaining[0] === 'string') {\n    const formatString = String(remaining.shift());\n    const formatStringParts = formatString.split('%s');\n    const substitutionCount = formatStringParts.length - 1;\n    const substitutions = remaining.splice(0, substitutionCount);\n\n    let categoryString = '';\n    let contentString = '';\n\n    let substitutionIndex = 0;\n    for (const formatStringPart of formatStringParts) {\n      categoryString += formatStringPart;\n      contentString += formatStringPart;\n\n      if (substitutionIndex < substitutionCount) {\n        if (substitutionIndex < substitutions.length) {\n          // Don't stringify a string type.\n          // It adds quotation mark wrappers around the string,\n          // which causes the LogBox to look odd.\n          const substitution =\n            typeof substitutions[substitutionIndex] === 'string'\n              ? substitutions[substitutionIndex]\n              : stringifySafe(substitutions[substitutionIndex]);\n          substitutionOffsets.push({\n            length: substitution.length,\n            offset: contentString.length,\n          });\n\n          categoryString += SUBSTITUTION;\n          contentString += substitution;\n        } else {\n          substitutionOffsets.push({\n            length: 2,\n            offset: contentString.length,\n          });\n\n          categoryString += '%s';\n          contentString += '%s';\n        }\n\n        substitutionIndex++;\n      }\n    }\n\n    categoryParts.push(categoryString);\n    contentParts.push(contentString);\n  }\n\n  const remainingArgs = remaining.map(arg => {\n    // Don't stringify a string type.\n    // It adds quotation mark wrappers around the string,\n    // which causes the LogBox to look odd.\n    return typeof arg === 'string' ? arg : stringifySafe(arg);\n  });\n  categoryParts.push(...remainingArgs);\n  contentParts.push(...remainingArgs);\n\n  return {\n    category: categoryParts.join(' '),\n    message: {\n      content: contentParts.join(' '),\n      substitutions: substitutionOffsets,\n    },\n  };\n}\n\nfunction isComponentStack(consoleArgument: string) {\n  const isOldComponentStackFormat = / {4}in/.test(consoleArgument);\n  const isNewComponentStackFormat = / {4}at/.test(consoleArgument);\n  const isNewJSCComponentStackFormat = /@.*\\n/.test(consoleArgument);\n\n  return (\n    isOldComponentStackFormat ||\n    isNewComponentStackFormat ||\n    isNewJSCComponentStackFormat\n  );\n}\n\nexport function parseComponentStack(message: string): ComponentStack {\n  // In newer versions of React, the component stack is formatted as a call stack frame.\n  // First try to parse the component stack as a call stack frame, and if that doesn't\n  // work then we'll fallback to the old custom component stack format parsing.\n  const stack = parseErrorStack(message);\n  if (stack && stack.length > 0) {\n    return stack.map(frame => ({\n      content: frame.methodName,\n      collapse: frame.collapse || false,\n      fileName: frame.file == null ? 'unknown' : frame.file,\n      location: {\n        column: frame.column == null ? -1 : frame.column,\n        row: frame.lineNumber == null ? -1 : frame.lineNumber,\n      },\n    }));\n  }\n\n  return message\n    .split(/\\n {4}in /g)\n    .map(s => {\n      if (!s) {\n        return null;\n      }\n      const match = s.match(/(.*) \\(at (.*\\.js):([\\d]+)\\)/);\n      if (!match) {\n        return null;\n      }\n\n      let [content, fileName, row] = match.slice(1);\n      return {\n        content,\n        fileName,\n        location: {column: -1, row: parseInt(row, 10)},\n      };\n    })\n    .filter(Boolean);\n}\n\nexport function parseLogBoxException(\n  error: ExtendedExceptionData,\n): LogBoxLogData {\n  const message =\n    error.originalMessage != null ? error.originalMessage : 'Unknown';\n\n  const metroInternalError = message.match(METRO_ERROR_FORMAT);\n  if (metroInternalError) {\n    const [\n      content,\n      fileName,\n      row,\n      column,\n      codeFrame,\n    ] = metroInternalError.slice(1);\n\n    return {\n      level: 'fatal',\n      type: 'Metro Error',\n      stack: [],\n      isComponentError: false,\n      componentStack: [],\n      codeFrame: {\n        fileName,\n        location: {\n          row: parseInt(row, 10),\n          column: parseInt(column, 10),\n        },\n        content: codeFrame,\n      },\n      message: {\n        content,\n        substitutions: [],\n      },\n      category: `${fileName}-${row}-${column}`,\n    };\n  }\n\n  const babelTransformError = message.match(BABEL_TRANSFORM_ERROR_FORMAT);\n  if (babelTransformError) {\n    // Transform errors are thrown from inside the Babel transformer.\n    const [\n      fileName,\n      content,\n      row,\n      column,\n      codeFrame,\n    ] = babelTransformError.slice(1);\n\n    return {\n      level: 'syntax',\n      stack: [],\n      isComponentError: false,\n      componentStack: [],\n      codeFrame: {\n        fileName,\n        location: {\n          row: parseInt(row, 10),\n          column: parseInt(column, 10),\n        },\n        content: codeFrame,\n      },\n      message: {\n        content,\n        substitutions: [],\n      },\n      category: `${fileName}-${row}-${column}`,\n    };\n  }\n\n  const babelCodeFrameError = message.match(BABEL_CODE_FRAME_ERROR_FORMAT);\n\n  if (babelCodeFrameError) {\n    // Codeframe errors are thrown from any use of buildCodeFrameError.\n    const [fileName, content, codeFrame] = babelCodeFrameError.slice(1);\n    return {\n      level: 'syntax',\n      stack: [],\n      isComponentError: false,\n      componentStack: [],\n      codeFrame: {\n        fileName,\n        location: null, // We are not given the location.\n        content: codeFrame,\n      },\n      message: {\n        content,\n        substitutions: [],\n      },\n      category: `${fileName}-${1}-${1}`,\n    };\n  }\n\n  if (message.match(/^TransformError /)) {\n    return {\n      level: 'syntax',\n      stack: error.stack,\n      isComponentError: error.isComponentError,\n      componentStack: [],\n      message: {\n        content: message,\n        substitutions: [],\n      },\n      category: message,\n    };\n  }\n\n  const componentStack = error.componentStack;\n  if (error.isFatal || error.isComponentError) {\n    return {\n      level: 'fatal',\n      stack: error.stack,\n      isComponentError: error.isComponentError,\n      componentStack:\n        componentStack != null ? parseComponentStack(componentStack) : [],\n      ...parseInterpolation([message]),\n    };\n  }\n\n  if (componentStack != null) {\n    // It is possible that console errors have a componentStack.\n    return {\n      level: 'error',\n      stack: error.stack,\n      isComponentError: error.isComponentError,\n      componentStack: parseComponentStack(componentStack),\n      ...parseInterpolation([message]),\n    };\n  }\n\n  // Most `console.error` calls won't have a componentStack. We parse them like\n  // regular logs which have the component stack burried in the message.\n  return {\n    level: 'error',\n    stack: error.stack,\n    isComponentError: error.isComponentError,\n    ...parseLogBoxLog([message]),\n  };\n}\n\nexport function parseLogBoxLog(\n  args: $ReadOnlyArray<mixed>,\n): {|\n  componentStack: ComponentStack,\n  category: Category,\n  message: Message,\n|} {\n  const message = args[0];\n  let argsWithoutComponentStack = [];\n  let componentStack = [];\n\n  // Extract component stack from warnings like \"Some warning%s\".\n  if (\n    typeof message === 'string' &&\n    message.slice(-2) === '%s' &&\n    args.length > 0\n  ) {\n    const lastArg = args[args.length - 1];\n    if (typeof lastArg === 'string' && isComponentStack(lastArg)) {\n      argsWithoutComponentStack = args.slice(0, -1);\n      argsWithoutComponentStack[0] = message.slice(0, -2);\n      componentStack = parseComponentStack(lastArg);\n    }\n  }\n\n  if (componentStack.length === 0) {\n    // Try finding the component stack elsewhere.\n    for (const arg of args) {\n      if (typeof arg === 'string' && isComponentStack(arg)) {\n        // Strip out any messages before the component stack.\n        let messageEndIndex = arg.search(/\\n {4}(in|at) /);\n        if (messageEndIndex < 0) {\n          // Handle JSC component stacks.\n          messageEndIndex = arg.search(/\\n/);\n        }\n        if (messageEndIndex > 0) {\n          argsWithoutComponentStack.push(arg.slice(0, messageEndIndex));\n        }\n\n        componentStack = parseComponentStack(arg);\n      } else {\n        argsWithoutComponentStack.push(arg);\n      }\n    }\n  }\n\n  return {\n    ...parseInterpolation(argsWithoutComponentStack),\n    componentStack,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}