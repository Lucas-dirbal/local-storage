{"ast":null,"code":"'use strict';\n\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nvar NativeModules = require(\"../BatchedBridge/NativeModules\");\nvar Platform = require(\"../Utilities/Platform\");\nvar UIManagerProperties = require(\"./UIManagerProperties\");\nvar defineLazyObjectProperty = require(\"../Utilities/defineLazyObjectProperty\");\nimport NativeUIManager from \"./NativeUIManager\";\nvar viewManagerConfigs = {};\nvar triedLoadingConfig = new Set();\nvar NativeUIManagerConstants = {};\nvar isNativeUIManagerConstantsSet = false;\nfunction _getConstants() {\n  if (!isNativeUIManagerConstantsSet) {\n    NativeUIManagerConstants = NativeUIManager.getConstants();\n    isNativeUIManagerConstantsSet = true;\n  }\n  return NativeUIManagerConstants;\n}\nvar UIManagerJS = _objectSpread(_objectSpread({}, NativeUIManager), {}, {\n  getConstants: function getConstants() {\n    return _getConstants();\n  },\n  getViewManagerConfig: function getViewManagerConfig(viewManagerName) {\n    if (viewManagerConfigs[viewManagerName] === undefined && NativeUIManager.getConstantsForViewManager) {\n      try {\n        viewManagerConfigs[viewManagerName] = NativeUIManager.getConstantsForViewManager(viewManagerName);\n      } catch (e) {\n        viewManagerConfigs[viewManagerName] = null;\n      }\n    }\n    var config = viewManagerConfigs[viewManagerName];\n    if (config) {\n      return config;\n    }\n    if (!global.nativeCallSyncHook) {\n      return config;\n    }\n    if (NativeUIManager.lazilyLoadView && !triedLoadingConfig.has(viewManagerName)) {\n      var result = NativeUIManager.lazilyLoadView(viewManagerName);\n      triedLoadingConfig.add(viewManagerName);\n      if (result.viewConfig) {\n        _getConstants()[viewManagerName] = result.viewConfig;\n        lazifyViewManagerConfig(viewManagerName);\n      }\n    }\n    return viewManagerConfigs[viewManagerName];\n  }\n});\nNativeUIManager.getViewManagerConfig = UIManagerJS.getViewManagerConfig;\nfunction lazifyViewManagerConfig(viewName) {\n  var viewConfig = _getConstants()[viewName];\n  viewManagerConfigs[viewName] = viewConfig;\n  if (viewConfig.Manager) {\n    defineLazyObjectProperty(viewConfig, 'Constants', {\n      get: function get() {\n        var viewManager = NativeModules[viewConfig.Manager];\n        var constants = {};\n        viewManager && Object.keys(viewManager).forEach(function (key) {\n          var value = viewManager[key];\n          if (typeof value !== 'function') {\n            constants[key] = value;\n          }\n        });\n        return constants;\n      }\n    });\n    defineLazyObjectProperty(viewConfig, 'Commands', {\n      get: function get() {\n        var viewManager = NativeModules[viewConfig.Manager];\n        var commands = {};\n        var index = 0;\n        viewManager && Object.keys(viewManager).forEach(function (key) {\n          var value = viewManager[key];\n          if (typeof value === 'function') {\n            commands[key] = index++;\n          }\n        });\n        return commands;\n      }\n    });\n  }\n}\nif (Platform.OS === 'ios') {\n  Object.keys(_getConstants()).forEach(function (viewName) {\n    lazifyViewManagerConfig(viewName);\n  });\n} else if (_getConstants().ViewManagerNames) {\n  NativeUIManager.getConstants().ViewManagerNames.forEach(function (viewManagerName) {\n    defineLazyObjectProperty(NativeUIManager, viewManagerName, {\n      get: function get() {\n        return NativeUIManager.getConstantsForViewManager(viewManagerName);\n      }\n    });\n  });\n}\nif (!global.nativeCallSyncHook) {\n  Object.keys(_getConstants()).forEach(function (viewManagerName) {\n    if (!UIManagerProperties.includes(viewManagerName)) {\n      if (!viewManagerConfigs[viewManagerName]) {\n        viewManagerConfigs[viewManagerName] = _getConstants()[viewManagerName];\n      }\n      defineLazyObjectProperty(NativeUIManager, viewManagerName, {\n        get: function get() {\n          console.warn(\"Accessing view manager configs directly off UIManager via UIManager['\" + viewManagerName + \"'] \" + (\"is no longer supported. Use UIManager.getViewManagerConfig('\" + viewManagerName + \"') instead.\"));\n          return UIManagerJS.getViewManagerConfig(viewManagerName);\n        }\n      });\n    }\n  });\n}\nmodule.exports = UIManagerJS;","map":{"version":3,"names":["_defineProperty","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","getOwnPropertyDescriptors","defineProperties","defineProperty","NativeModules","require","Platform","UIManagerProperties","defineLazyObjectProperty","NativeUIManager","viewManagerConfigs","triedLoadingConfig","Set","NativeUIManagerConstants","isNativeUIManagerConstantsSet","getConstants","UIManagerJS","getViewManagerConfig","viewManagerName","undefined","getConstantsForViewManager","config","global","nativeCallSyncHook","lazilyLoadView","has","result","add","viewConfig","lazifyViewManagerConfig","viewName","Manager","get","viewManager","constants","key","value","commands","index","OS","ViewManagerNames","includes","console","warn","module","exports"],"sources":["/workspaces/local-storage/node_modules/react-native/Libraries/ReactNative/PaperUIManager.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nconst NativeModules = require('../BatchedBridge/NativeModules');\nconst Platform = require('../Utilities/Platform');\nconst UIManagerProperties = require('./UIManagerProperties');\n\nconst defineLazyObjectProperty = require('../Utilities/defineLazyObjectProperty');\n\nimport NativeUIManager from './NativeUIManager';\n\nconst viewManagerConfigs = {};\n\nconst triedLoadingConfig = new Set();\n\nlet NativeUIManagerConstants = {};\nlet isNativeUIManagerConstantsSet = false;\nfunction getConstants(): Object {\n  if (!isNativeUIManagerConstantsSet) {\n    NativeUIManagerConstants = NativeUIManager.getConstants();\n    isNativeUIManagerConstantsSet = true;\n  }\n  return NativeUIManagerConstants;\n}\n\n/* $FlowFixMe(>=0.123.0 site=react_native_fb) This comment suppresses an error\n * found when Flow v0.123.0 was deployed. To see the error, delete this comment\n * and run Flow. */\nconst UIManagerJS = {\n  ...NativeUIManager,\n  getConstants(): Object {\n    return getConstants();\n  },\n  getViewManagerConfig: function(viewManagerName: string): any {\n    if (\n      viewManagerConfigs[viewManagerName] === undefined &&\n      NativeUIManager.getConstantsForViewManager\n    ) {\n      try {\n        viewManagerConfigs[\n          viewManagerName\n        ] = NativeUIManager.getConstantsForViewManager(viewManagerName);\n      } catch (e) {\n        viewManagerConfigs[viewManagerName] = null;\n      }\n    }\n\n    const config = viewManagerConfigs[viewManagerName];\n    if (config) {\n      return config;\n    }\n\n    // If we're in the Chrome Debugger, let's not even try calling the sync\n    // method.\n    if (!global.nativeCallSyncHook) {\n      return config;\n    }\n\n    if (\n      NativeUIManager.lazilyLoadView &&\n      !triedLoadingConfig.has(viewManagerName)\n    ) {\n      const result = NativeUIManager.lazilyLoadView(viewManagerName);\n      triedLoadingConfig.add(viewManagerName);\n      if (result.viewConfig) {\n        getConstants()[viewManagerName] = result.viewConfig;\n        lazifyViewManagerConfig(viewManagerName);\n      }\n    }\n\n    return viewManagerConfigs[viewManagerName];\n  },\n};\n\n// TODO (T45220498): Remove this.\n// 3rd party libs may be calling `NativeModules.UIManager.getViewManagerConfig()`\n// instead of `UIManager.getViewManagerConfig()` off UIManager.js.\n// This is a workaround for now.\n// $FlowFixMe\nNativeUIManager.getViewManagerConfig = UIManagerJS.getViewManagerConfig;\n\nfunction lazifyViewManagerConfig(viewName) {\n  const viewConfig = getConstants()[viewName];\n  viewManagerConfigs[viewName] = viewConfig;\n  if (viewConfig.Manager) {\n    defineLazyObjectProperty(viewConfig, 'Constants', {\n      get: () => {\n        const viewManager = NativeModules[viewConfig.Manager];\n        const constants = {};\n        viewManager &&\n          Object.keys(viewManager).forEach(key => {\n            const value = viewManager[key];\n            if (typeof value !== 'function') {\n              constants[key] = value;\n            }\n          });\n        return constants;\n      },\n    });\n    defineLazyObjectProperty(viewConfig, 'Commands', {\n      get: () => {\n        const viewManager = NativeModules[viewConfig.Manager];\n        const commands = {};\n        let index = 0;\n        viewManager &&\n          Object.keys(viewManager).forEach(key => {\n            const value = viewManager[key];\n            if (typeof value === 'function') {\n              commands[key] = index++;\n            }\n          });\n        return commands;\n      },\n    });\n  }\n}\n\n/**\n * Copies the ViewManager constants and commands into UIManager. This is\n * only needed for iOS, which puts the constants in the ViewManager\n * namespace instead of UIManager, unlike Android.\n */\nif (Platform.OS === 'ios') {\n  Object.keys(getConstants()).forEach(viewName => {\n    lazifyViewManagerConfig(viewName);\n  });\n} else if (getConstants().ViewManagerNames) {\n  NativeUIManager.getConstants().ViewManagerNames.forEach(viewManagerName => {\n    defineLazyObjectProperty(NativeUIManager, viewManagerName, {\n      get: () => NativeUIManager.getConstantsForViewManager(viewManagerName),\n    });\n  });\n}\n\nif (!global.nativeCallSyncHook) {\n  Object.keys(getConstants()).forEach(viewManagerName => {\n    if (!UIManagerProperties.includes(viewManagerName)) {\n      if (!viewManagerConfigs[viewManagerName]) {\n        viewManagerConfigs[viewManagerName] = getConstants()[viewManagerName];\n      }\n      defineLazyObjectProperty(NativeUIManager, viewManagerName, {\n        get: () => {\n          console.warn(\n            `Accessing view manager configs directly off UIManager via UIManager['${viewManagerName}'] ` +\n              `is no longer supported. Use UIManager.getViewManagerConfig('${viewManagerName}') instead.`,\n          );\n\n          return UIManagerJS.getViewManagerConfig(viewManagerName);\n        },\n      });\n    }\n  });\n}\n\nmodule.exports = UIManagerJS;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}